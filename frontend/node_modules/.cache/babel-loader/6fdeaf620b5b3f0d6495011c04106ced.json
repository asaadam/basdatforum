{"ast":null,"code":"'use strict'; // Load modules\n// Delcare internals\n\nvar internals = {\n  rfc3986: {}\n};\n\ninternals.generate = function () {\n  /**\r\n   * elements separated by forward slash (\"/\") are alternatives.\r\n   */\n  var or = '|';\n  /**\r\n   * Rule to support zero-padded addresses.\r\n   */\n\n  var zeroPad = '0?';\n  /**\r\n   * DIGIT = %x30-39 ; 0-9\r\n   */\n\n  var digit = '0-9';\n  var digitOnly = '[' + digit + ']';\n  /**\r\n   * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z\r\n   */\n\n  var alpha = 'a-zA-Z';\n  var alphaOnly = '[' + alpha + ']';\n  /**\r\n   * IPv4\r\n   * cidr       = DIGIT                ; 0-9\r\n   *            / %x31-32 DIGIT         ; 10-29\r\n   *            / \"3\" %x30-32           ; 30-32\r\n   */\n\n  internals.rfc3986.ipv4Cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';\n  /**\r\n   * IPv6\r\n   * cidr       = DIGIT                 ; 0-9\r\n   *            / %x31-39 DIGIT         ; 10-99\r\n   *            / \"1\" %x0-1 DIGIT       ; 100-119\r\n   *            / \"12\" %x0-8            ; 120-128\r\n   */\n\n  internals.rfc3986.ipv6Cidr = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + '[01]' + digitOnly + or + '12[0-8])';\n  /**\r\n   * HEXDIG = DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\r\n   */\n\n  var hexDigit = digit + 'A-Fa-f';\n  var hexDigitOnly = '[' + hexDigit + ']';\n  /**\r\n   * unreserved = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\r\n   */\n\n  var unreserved = alpha + digit + '-\\\\._~';\n  /**\r\n   * sub-delims = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\r\n   */\n\n  var subDelims = '!\\\\$&\\'\\\\(\\\\)\\\\*\\\\+,;=';\n  /**\r\n   * pct-encoded = \"%\" HEXDIG HEXDIG\r\n   */\n\n  var pctEncoded = '%' + hexDigit;\n  /**\r\n   * pchar = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\r\n   */\n\n  var pchar = unreserved + pctEncoded + subDelims + ':@';\n  var pcharOnly = '[' + pchar + ']';\n  /**\r\n   * squareBrackets example: []\r\n   */\n\n  var squareBrackets = '\\\\[\\\\]';\n  /**\r\n   * dec-octet   = DIGIT                 ; 0-9\r\n   *            / %x31-39 DIGIT         ; 10-99\r\n   *            / \"1\" 2DIGIT            ; 100-199\r\n   *            / \"2\" %x30-34 DIGIT     ; 200-249\r\n   *            / \"25\" %x30-35          ; 250-255\r\n   */\n\n  var decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';\n  /**\r\n   * IPv4address = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\r\n   */\n\n  internals.rfc3986.IPv4address = '(?:' + decOctect + '\\\\.){3}' + decOctect;\n  /**\r\n   * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal\r\n   * ls32 = ( h16 \":\" h16 ) / IPv4address ; least-significant 32 bits of address\r\n   * IPv6address =                            6( h16 \":\" ) ls32\r\n   *             /                       \"::\" 5( h16 \":\" ) ls32\r\n   *             / [               h16 ] \"::\" 4( h16 \":\" ) ls32\r\n   *             / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\r\n   *             / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\r\n   *             / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\r\n   *             / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\r\n   *             / [ *5( h16 \":\" ) h16 ] \"::\"              h16\r\n   *             / [ *6( h16 \":\" ) h16 ] \"::\"\r\n   */\n\n  var h16 = hexDigitOnly + '{1,4}';\n  var ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';\n  var IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;\n  var IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;\n  var IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;\n  var IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;\n  var IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;\n  var IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;\n  var IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;\n  var IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;\n  var IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';\n  internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';\n  /**\r\n   * IPvFuture = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\r\n   */\n\n  internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\\\.[' + unreserved + subDelims + ':]+';\n  /**\r\n   * scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\r\n   */\n\n  internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\\\.]*';\n  /**\r\n   * userinfo = *( unreserved / pct-encoded / sub-delims / \":\" )\r\n   */\n\n  var userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';\n  /**\r\n   * IP-literal = \"[\" ( IPv6address / IPvFuture  ) \"]\"\r\n   */\n\n  var IPLiteral = '\\\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\\\]';\n  /**\r\n   * reg-name = *( unreserved / pct-encoded / sub-delims )\r\n   */\n\n  var regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';\n  /**\r\n   * host = IP-literal / IPv4address / reg-name\r\n   */\n\n  var host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';\n  /**\r\n   * port = *DIGIT\r\n   */\n\n  var port = digitOnly + '*';\n  /**\r\n   * authority   = [ userinfo \"@\" ] host [ \":\" port ]\r\n   */\n\n  var authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';\n  /**\r\n   * segment       = *pchar\r\n   * segment-nz    = 1*pchar\r\n   * path          = path-abempty    ; begins with \"/\" or is empty\r\n   *               / path-absolute   ; begins with \"/\" but not \"//\"\r\n   *               / path-noscheme   ; begins with a non-colon segment\r\n   *               / path-rootless   ; begins with a segment\r\n   *               / path-empty      ; zero characters\r\n   * path-abempty  = *( \"/\" segment )\r\n   * path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\r\n   * path-rootless = segment-nz *( \"/\" segment )\r\n   */\n\n  var segment = pcharOnly + '*';\n  var segmentNz = pcharOnly + '+';\n  var segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';\n  var pathEmpty = '';\n  var pathAbEmpty = '(?:\\\\/' + segment + ')*';\n  var pathAbsolute = '\\\\/(?:' + segmentNz + pathAbEmpty + ')?';\n  var pathRootless = segmentNz + pathAbEmpty;\n  var pathNoScheme = segmentNzNc + pathAbEmpty;\n  /**\r\n   * hier-part = \"//\" authority path\r\n   */\n\n  internals.rfc3986.hierPart = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathRootless + ')';\n  /**\r\n   * relative-part = \"//\" authority path-abempty\r\n   *                 / path-absolute\r\n   *                 / path-noscheme\r\n   *                 / path-empty\r\n   */\n\n  internals.rfc3986.relativeRef = '(?:' + '(?:\\\\/\\\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathNoScheme + or + pathEmpty + ')';\n  /**\r\n   * query = *( pchar / \"/\" / \"?\" )\r\n   */\n\n  internals.rfc3986.query = '[' + pchar + '\\\\/\\\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.\n\n  /**\r\n   * query = *( pchar / \"[\" / \"]\" / \"/\" / \"?\" )\r\n   */\n\n  internals.rfc3986.queryWithSquareBrackets = '[' + pchar + squareBrackets + '\\\\/\\\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.\n\n  /**\r\n   * fragment = *( pchar / \"/\" / \"?\" )\r\n   */\n\n  internals.rfc3986.fragment = '[' + pchar + '\\\\/\\\\?]*';\n};\n\ninternals.generate();\nmodule.exports = internals.rfc3986;","map":null,"metadata":{},"sourceType":"script"}