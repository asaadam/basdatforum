{"ast":null,"code":"import _classCallCheck from \"/home/adam/Project/basdatforum/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/adam/Project/basdatforum/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/adam/Project/basdatforum/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/adam/Project/basdatforum/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/adam/Project/basdatforum/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/adam/Project/basdatforum/frontend/src/pages/detail.js\";\nimport React, { Component } from 'react';\nimport { Container, Card, CardImg, CardText, CardBody, CardLink, CardTitle, CardSubtitle } from 'reactstrap';\nimport { Input, Form, FormGroup, Label, Button } from 'reactstrap';\n\nvar Detail =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Detail, _Component);\n\n  function Detail(props) {\n    var _this;\n\n    _classCallCheck(this, Detail);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Detail).call(this, props));\n\n    _this.komen = function (event) {\n      var URL_POST = 'http://localhost:5000/api/postComment';\n\n      _this.setState({\n        errorMessage: \"\"\n      });\n\n      _this.setState({\n        login: true\n      });\n\n      var body = {\n        idThread: _this.props.location.search.substring(1),\n        comment: _this.state.comments.postComment\n      };\n      console.log(body);\n      console.log('post comment : ' + _this.state.comments.postcomment);\n      fetch(URL_POST, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': localStorage.token\n        },\n        body: JSON.stringify(body)\n      }).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        }\n\n        return response.json().then(function (error) {\n          throw new Error(error.message);\n        });\n      }).catch(function (error) {\n        console.log('fetch error' + error);\n\n        _this.setState({\n          errorMessage: error.message\n        });\n\n        _this.setState({\n          login: false\n        });\n      });\n      event.preventDefault();\n    };\n\n    _this.handleChange = function (e) {\n      var inputName = e.target.name;\n      var inputValue = e.target.value;\n      var copyPost = Object.assign({}, _this.state.comments);\n      console.log(copyPost);\n      copyPost[inputName] = inputValue;\n\n      _this.setState({\n        comments: copyPost\n      });\n\n      console.log(_this.state.comments);\n    };\n\n    _this.state = {\n      post: [],\n      comment: [],\n      comments: [],\n      loading: false,\n      errorMessage: \"\",\n      login: false\n    };\n    console.log(localStorage.token);\n    return _this;\n  }\n\n  _createClass(Detail, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var body = {\n        idThread: this.props.location.search.substring(1)\n      };\n      this.setState({\n        loading: true\n      });\n      fetch('http://localhost:5000/api/getAThread', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': localStorage.token\n        },\n        body: JSON.stringify(body)\n      }).then(function (results) {\n        return results.json();\n      }).then(function (data) {\n        console.log(data);\n\n        _this2.setState({\n          post: data\n        });\n\n        _this2.setState({\n          loading: false\n        });\n      });\n      console.log(this.state.post);\n      this.setState({\n        loading: true\n      });\n      fetch('http://localhost:5000/api/getAComment', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': localStorage.token\n        },\n        body: JSON.stringify(body)\n      }).then(function (results) {\n        return results.json();\n      }).then(function (data) {\n        console.log(data);\n\n        _this2.setState({\n          comment: data\n        });\n\n        _this2.setState({\n          loading: false\n        });\n      });\n      console.log(this.state.comment);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.comment);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.state.loading && React.createElement(\"img\", {\n        src: require('../asset/loads.svg'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), this.state.post.map(function (post) {\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(CardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(CardTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, post.title), React.createElement(CardSubtitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, post.username), React.createElement(CardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, post.post)));\n      }), React.createElement(Form, {\n        onSubmit: this.komen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"exampleText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Post Comment\"), React.createElement(Input, {\n        type: \"textarea\",\n        placeholder: \"What do u think?\",\n        name: \"postComment\",\n        id: \"postComment\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Comment\"))), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Comments\"), this.state.comment.map(function (komen) {\n        return React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(CardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(CardTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, komen.idUser), React.createElement(CardSubtitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, komen.comments), React.createElement(CardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, komen.currentTimeStamp)));\n      })));\n    }\n  }]);\n\n  return Detail;\n}(Component);\n\nexport { Detail as default };","map":{"version":3,"sources":["/home/adam/Project/basdatforum/frontend/src/pages/detail.js"],"names":["React","Component","Container","Card","CardImg","CardText","CardBody","CardLink","CardTitle","CardSubtitle","Input","Form","FormGroup","Label","Button","Detail","props","komen","event","URL_POST","setState","errorMessage","login","body","idThread","location","search","substring","comment","state","comments","postComment","console","log","postcomment","fetch","method","headers","localStorage","token","JSON","stringify","then","response","ok","json","error","Error","message","catch","preventDefault","handleChange","e","inputName","target","name","inputValue","value","copyPost","Object","assign","post","loading","results","data","require","map","title","username","idUser","currentTimeStamp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Container, Card, CardImg, CardText, CardBody, CardLink,\n  CardTitle, CardSubtitle } from 'reactstrap';\nimport { Input, Form, FormGroup, Label, Button } from 'reactstrap';\n\n\nexport default class Detail extends Component {  \n  constructor(props){\n    super(props);\n    this.state={\n      post: [],\n      comment:[],\n      comments:[],\n      loading: false,\n      errorMessage: \"\",\n      login: false\n    }\n    console.log(localStorage.token);\n  }\n  componentDidMount(){\n    const body ={\n      idThread : this.props.location.search.substring(1)\n    }\n    this.setState({loading: true});\n      fetch('http://localhost:5000/api/getAThread',{\n        method: 'POST',\n        headers:{\n          'content-type':'application/json',\n          'authorization': localStorage.token\n        },\n        body:JSON.stringify(body)\n      }).then( results => {\n          return results.json();\n      }).then(data => {\n          console.log(data);\n          this.setState({post:data});\n          this.setState({loading: false});\n      })\n      console.log(this.state.post);\n      this.setState({loading: true});\n      fetch('http://localhost:5000/api/getAComment',{\n        method: 'POST',\n        headers:{\n          'content-type':'application/json',\n          'authorization': localStorage.token\n        },\n        body:JSON.stringify(body)\n      }).then( results => {\n          return results.json();\n      }).then(data => {\n          console.log(data);\n          this.setState({comment:data});\n          this.setState({loading: false});\n      })\n      console.log(this.state.comment);\n  } \n  komen = (event) => {\n    let URL_POST = 'http://localhost:5000/api/postComment';\n    this.setState({ errorMessage: \"\" })\n    this.setState({login:true})\n    const body={\n      idThread : this.props.location.search.substring(1),\n      comment : this.state.comments.postComment\n    }\n    console.log(body);\n    console.log('post comment : ' + this.state.comments.postcomment);\n    fetch (URL_POST,{\n      method: 'POST',\n      headers:{\n        'content-type':'application/json',\n        'authorization': localStorage.token\n      },\n      body:JSON.stringify(body),\n    }).then(response=>{\n      if(response.ok){\n        return response.json();   \n      }\n      return response.json().then(error=>{\n        throw new Error(error.message);\n      });\n    }).catch(error=>{\n      console.log('fetch error'+error)\n      this.setState({ errorMessage: error.message });\n      this.setState({login:false})\n\n    });\n\n    event.preventDefault();\n\n  }\n\n  handleChange = e => {\n    let inputName = e.target.name;\n    let inputValue = e.target.value;\n    let copyPost = Object.assign({}, this.state.comments);\n    console.log(copyPost);\n    copyPost[inputName] = inputValue;\n    this.setState({ comments: copyPost });\n    console.log(this.state.comments);\n    \n  }\n  render() {\n    console.log(this.state.comment);\n    return (\n      <div>\n        <Container>\n          {this.state.loading&&(<img src={require('../asset/loads.svg')}></img>)}\n          {this.state.post.map(post => (\n              <Card>\n              <CardBody>\n                <CardTitle>{post.title}</CardTitle>\n                <CardSubtitle>{post.username}</CardSubtitle>\n              {/* </CardBody>\n              <img width=\"100%\" src=\"https://placeholdit.imgix.net/~text?txtsize=33&txt=318%C3%97180&w=318&h=180\" alt=\"Card image cap\" />\n              <CardBody> */}\n                <CardText>{post.post}</CardText>\n              </CardBody>\n            </Card>\n          ))}\n          <Form onSubmit={this.komen}>\n            <FormGroup>\n              <Label for=\"exampleText\">Post Comment</Label>\n              <Input type=\"textarea\" placeholder=\"What do u think?\" name=\"postComment\" id=\"postComment\" onChange={this.handleChange}/>\n              <Button>Comment</Button>\n            </FormGroup>\n          </Form>\n          <h2>Comments</h2>\n          {this.state.comment.map(komen => (\n              <Card>\n              <CardBody>\n                <CardTitle>{komen.idUser}</CardTitle>\n                <CardSubtitle>{komen.comments}</CardSubtitle>\n              {/* </CardBody>\n              <img width=\"100%\" src=\"https://placeholdit.imgix.net/~text?txtsize=33&txt=318%C3%97180&w=318&h=180\" alt=\"Card image cap\" />\n              <CardBody> */}\n                <CardText>{komen.currentTimeStamp}</CardText>\n              </CardBody>\n            </Card>\n          ))}\n        \n        </Container>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}